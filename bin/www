#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');

const port = normalizePort(process.env.PORT || '3000');



/**
 * Normalize a port into a number, string, or false.
 */
let server
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log('on listen...')
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
	: 'port ' + addr.port;

  for (let line of startupMessage.split("\n")) {
    console.log(JSON.stringify(line));
  }

  console.log('Server listening on ' + bind + ' ðŸš€');
}

const startupMessage = `
  Started the app.
`

app.use(function onerror() { onError(...arguments)} )


server = app.listen(process.env.PORT || 3000, onListening)

